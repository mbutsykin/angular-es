{
  "name": "angular-es",
  "tagline": "Angular 1.x ES2016 helper",
  "body": "# angular-es\r\nThis is a helper library for developing [Angular@1.x](https://github.com/angular/angular) applications with ES7 decorators.\r\n<br/>\r\n\r\n## Benefits\r\n- Perfectly runs with [jspm](http://jspm.io/), [webpack](https://webpack.github.io/) & [babel](https://babeljs.io/)\r\n- Supports lazy loading & initialization with libraries like [$ocLazyLoad](https://github.com/ocombe/ocLazyLoad)\r\n- Perfectly suits for `folder-by-feature` application structure\r\n- Simple in usage\r\n\r\n## Installation\r\n```\r\nnpm install angular-es\r\n```\r\n\r\n## Available decorators\r\n\r\n- [@Component](#component)\r\n- [@Config](#config)\r\n- [@Constant](#constant)\r\n- [@Controller](#controller)\r\n- [@Decorator](#decorator)\r\n- [@Directive](#directive)\r\n- [@Factory](#factory)\r\n- [@Filter](#filter)\r\n- [@Inject](#inject)\r\n- [@InjectAsProperty](#injectAsProperty)\r\n- [@Module](#module)\r\n- [@Provider](#provider)\r\n- [@Run](#run)\r\n- [@Service](#service)\r\n- [@Value](#value)\r\n\r\n## Usage\r\n\r\n### Component\r\nDefine component\r\n\r\n```javascript\r\nimport {Component, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Component({\r\n\tselector: 'my-component',\r\n\tbindings: {\r\n\t\tdata: '='\r\n\t},\r\n\ttemplate: `<p>{{ $ctrl.data }}</p>`\r\n})\r\n@Inject('myService')\r\nclass MyComponentController {\r\n\r\n\tmyService;\r\n\t\r\n\tconstructor(myService) {\r\n\t\tthis.myService = myService;\r\n\t}\r\n}\r\n```\r\n\r\n### Config\r\nAdd config block\r\n\r\n```javascript\r\nimport {Config, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Config\r\n@Inject('$myServiceProvider')\r\nclass MyModuleConfig {\r\n\t\r\n\tconstructor($myServiceProvider) {\r\n\t}\r\n}\r\n```\r\n\r\n### Constant\r\nRegister constant\r\n\r\n```javascript\r\nimport {Constant, Module} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Constant('MY_CONSTANT')\r\nclass MyConstant {\r\n\tfoo = 'foo';\r\n\tbar = 'bar';\r\n}\r\n```\r\n\r\n### Controller\r\nRegister controller\r\n\r\n```javascript\r\nimport {Controller, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Controller('MyController')\r\n@Inject('$myService')\r\nclass MyController {\r\n\t\r\n\t$myService;\r\n\t\r\n\tconstructor($myService) {\r\n\t\tthis.$myService = $myService;\r\n\t}\r\n}\r\n```\r\n\r\n### Decorator\r\nProvide decorator\r\n\r\n```javascript\r\nimport {Decorator, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Decorator('$http')\r\n@Inject('$delegate')\r\nclass HttpDecorator {\r\n\tconstructor($delegate) {\r\n\t\t$delegate.decorated = true;\r\n\r\n\t\treturn $delegate;\r\n\t}\r\n}\r\n\r\nexport {HttpDecorator};\r\n\r\n```\r\n\r\n### Directive\r\nRegister directive\r\n\r\n```javascript\r\nimport {Directive, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Directive('my-directive')\r\n@Inject('$myService')\r\nclass MyDirective {\r\n\t\r\n\t$myService;\r\n\t\r\n\trestrict = 'A';\r\n\tcontrollerAs = 'vm';\r\n\t\r\n\tconstructor($myService) {\r\n\t\tthis.$myService = $myService;\r\n\t}\r\n\t\r\n\t@Inject('$scope')\r\n\tcontroller($scope) {\r\n\t}\r\n\t\r\n\tlink(scope) {\r\n\t\tthis.$myService;\r\n\t}\r\n}\r\n```\r\n\r\n### Factory\r\nRegister factory\r\n\r\n```javascript\r\nimport {Factory, Module, Inject} from 'angular-es';\r\n\r\nclass TestModel {\r\n\tstatic $q;\r\n\tstatic myService\r\n}\r\n\r\n@Module('my.module')\r\n@Factory('TestModel')\r\n@Inject('$q', 'myService')\r\nclass TestModelFactory {\r\n\tconstructor($q, myService) {\r\n\t\tTestModel.$q = $q;\r\n\t\tTestModel.myService = myService;\r\n\t\treturn TestModel;\r\n\t}\r\n}\r\n\r\n```\r\n\r\n### Filter\r\nRegister filter\r\n\r\n```javascript\r\nimport {Module, Filter, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Filter('test')\r\n@Inject('$q')\r\nclass TestFilter {\r\n\r\n\t$q;\r\n\r\n\tconstructor($q) {\r\n\t\tthis.$q = $q;\r\n\t\treturn ::this.filter;\r\n\t}\r\n\r\n\tfilter(input) {\r\n\t\tconst $q = this.$q;\r\n\t\treturn input.toUpperCase();\r\n\t}\r\n}\r\n```\r\n\r\n### Inject\r\nAdds `$inject` to target\r\n\r\n```javascript\r\nimport {Inject} from 'angular-es';\r\n\r\n@Inject('$rootScope')\r\nclass BaseInjectedClass {\r\n}\r\n\r\n@Inject('$http', '$q')\r\nclass InjectedClass extends BaseInjectedClass {\r\n\r\n    constructor($rootScope, $http, $q) {\r\n    \tsuper($rootScope);\r\n    }\r\n\r\n\t@Inject('$q')\r\n\tinjectedMethod() {\r\n\t}\r\n\r\n\t@Inject('$q')\r\n\tstatic injectedMethod() {\r\n\t}\r\n}\r\n```\r\n\r\n### InjectAsProperty\r\nInjects provided dependencies as properties\r\n\r\n```javascript\r\nimport {Module, Service, InjectAsProperty} from 'angular-es';\r\n\r\n@Module(test.name)\r\n@Service('testService')\r\n@InjectAsProperty('$q', '$http')\r\nclass TestService {\r\n\ttestMethod() {\r\n\t\treturn this.$http();\r\n\t}\r\n}\r\n```\r\n\r\n### Module\r\nAttaches target to specified angular module\r\n<br />\r\n`@Module` decorator is **required** and it has to be present at the top level of target annotation block\r\n<br />\r\n*Make sure that used angular module is already available*\r\n\r\n```javascript\r\nimport {Module, Controller} from 'angular-es';\r\nimport my from './my.module';\r\n\r\n@Module(my.name)\r\n@Controller('MyController')\r\nclass MyController {\r\n}\r\n```\r\n\r\n### Provider\r\nRegister provider\r\n\r\n```javascript\r\nimport {Provider, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Provider('myService')\r\nclass MyServiceProvider {\r\n\r\n\tstatic config;\r\n\r\n\tconfig(config) {\r\n\t\tMyServiceProvider.config = config;\r\n\t}\r\n\r\n\t@Inject('$q')\r\n\t$get($q) {\r\n\t\treturn {\r\n\t\t\tgetConfig: getConfig\r\n\t\t};\r\n\r\n\t\tfunction getConfig() {\r\n\t\t\treturn $q.resolve(MyServiceProvider.config);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\n### Run\r\nAdd run block\r\n\r\n```javascript\r\nimport {Run, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Run\r\n@Inject('$rootScope')\r\nclass MyRunBlock {\r\n\t\r\n\tconstructor($rootScope) {\r\n\t}\r\n}\r\n```\r\n\r\n### Service\r\nRegister service\r\n\r\n```javascript\r\nimport {Service, Module, Inject} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Service('MyService')\r\n@Inject('$http')\r\nclass MyService {\r\n\t\r\n\t$http;\r\n\t\r\n\tconstructor($http) {\r\n\t\tthis.$http = $http;\r\n\t}\r\n}\r\n```\r\n\r\n### Value\r\nRegister value\r\n\r\n```javascript\r\nimport {Value, Module} from 'angular-es';\r\n\r\n@Module('my.module')\r\n@Value('myValue')\r\nclass MyValue {\r\n\tfoo = 'foo';\r\n\tbar = 'bar';\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}